{"version":3,"sources":["components/getarticle/GetArticle.tsx","components/displayarticle/DisplayArticle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GetArticle","setPage","className","onClick","axios","get","then","res","data","catch","err","console","log","DisplayArticle","page","title","extract","App","useState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qSAyCeA,EA/B+B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAoB5C,OACI,yBAAKC,UAAU,aACX,4BACIA,UAAU,SACVC,QAdQ,WAChBC,IAAMC,IAAI,4DACLC,MAAK,SAAAC,GACFN,EAAQM,EAAIC,SAEfC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAO1B,mBCFGG,EAvBuC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAapD,OAAKA,EAGD,6BACI,4BAAKA,EAAKC,OACV,2BAAID,EAAKE,UALC,MCFPC,EAZH,WAAO,IAAD,EAEUC,mBAAS,MAFnB,mBAEPJ,EAFO,KAEDb,EAFC,KAId,OACI,yBAAKC,UAAU,gBACX,kBAAC,EAAD,CAAYD,QAASA,IACrB,kBAAC,EAAD,CAAgBa,KAAMA,MCD5BK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTpB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B1B,QAAQC,IACN,iHAKEe,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBpB,QAAQC,IAAI,sCAGRe,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BtB,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,OACA1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,OAAN,sBAEP5B,IAgEV,SAAiCO,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAA+C,GAEJ,IAAMC,EAAcD,EAASD,QAAQ/C,IAAI,gBAEnB,MAApBgD,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMnD,MAAK,SAAAyB,GACjCA,EAAa2B,aAAapD,MAAK,WAC7Be,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BlB,OAAM,WACLE,QAAQC,IACN,oEAvFAgD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMnD,MAAK,WACjCK,QAAQC,IACN,iHAMJa,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.564587f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\n\r\ntype GetArticleProps = {\r\n    setPage: any,\r\n\r\n}\r\n\r\n\r\n\r\nconst GetArticle: React.FC<GetArticleProps> = ({setPage}) => {\r\n\r\n    /***************\r\n     * HOOKS\r\n     ***************/\r\n\r\n    /***************\r\n     * FUNCTIONS\r\n     ***************/\r\n\r\n    const loadArticle = () => {\r\n        axios.get(\"https://de.wikipedia.org/api/rest_v1/page/random/summary\")\r\n            .then(res => {\r\n                setPage(res.data);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    /***************\r\n     * RENDERING\r\n     ***************/\r\n    return (\r\n        <div className=\"w3-bottom\">\r\n            <button\r\n                className=\"w3-bar\"\r\n                onClick={loadArticle}>\r\n                Artikel laden\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GetArticle;\r\n","import React from 'react';\r\n\r\ntype DisplayArticleProps = {\r\n    page: any\r\n\r\n}\r\n\r\nconst DisplayArticle: React.FC<DisplayArticleProps> = ({page}) => {\r\n\r\n    /***************\r\n     * HOOKS\r\n     ***************/\r\n\r\n    /***************\r\n     * FUNCTIONS\r\n     ***************/\r\n\r\n    /***************\r\n     * RENDERING\r\n     ***************/\r\n    if (!page) return null;\r\n\r\n    return (\r\n        <div>\r\n            <h3>{page.title}</h3>\r\n            <p>{page.extract}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DisplayArticle;\r\n","import React, {useState} from 'react';\nimport \"./App.css\"\nimport \"./assets/css/w3css.css\"\nimport GetArticle from \"./components/getarticle/GetArticle\";\nimport DisplayArticle from \"./components/displayarticle/DisplayArticle\";\n\nconst App = () => {\n\n    const [page, setPage] = useState(null);\n\n    return(\n        <div className=\"w3-container\">\n            <GetArticle setPage={setPage}/>\n            <DisplayArticle page={page}/>\n        </div>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}